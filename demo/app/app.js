"use strict";
// import Application = require("application");
Object.defineProperty(exports, "__esModule", { value: true });
var application = require("application");
;
;
;
;
;
;
;
;
if (application.ios) {
    var MyDelegate = (function (_super) {
        __extends(MyDelegate, _super);
        function MyDelegate() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MyDelegate.prototype.applicationDidFinishLaunchingWithOptions = function (application, launchOptions) {
            var gglDelegate = false;
            try {
                var errorRef = new interop.Reference();
                GGLContext.sharedInstance().configureWithError(errorRef);
                var signIn = GIDSignIn.sharedInstance();
                gglDelegate = true;
            }
            catch (error) {
                console.log(error);
            }
            var fcbDelegate = FBSDKApplicationDelegate.sharedInstance().applicationDidFinishLaunchingWithOptions(application, launchOptions); // facebook login delegate
            return gglDelegate || fcbDelegate;
        };
        MyDelegate.prototype.applicationOpenURLSourceApplicationAnnotation = function (application, url, sourceApplication, annotation) {
            var fcbDelegate = FBSDKApplicationDelegate.sharedInstance().applicationOpenURLSourceApplicationAnnotation(application, url, sourceApplication, annotation); // facebook login delegate
            var gglDelegate = GIDSignIn.sharedInstance().handleURLSourceApplicationAnnotation(url, sourceApplication, annotation); // google login delegate
            var linkinDelegate = false;
            if (LinkedinSwiftHelper.shouldHandleUrl(url)) {
                var linkinDelegate_1 = LinkedinSwiftHelper.application(application, url, sourceApplication, annotation);
            }
            return fcbDelegate || gglDelegate;
        };
        MyDelegate.ObjCProtocols = [UIApplicationDelegate];
        return MyDelegate;
    }(UIResponder));
    application.ios.delegate = MyDelegate;
}
application.start({ moduleName: "main-page" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwrQ0FBK0M7O0FBRS9DLHlDQUEyQztBQVVkLENBQUM7QUFDUyxDQUFDO0FBSXZDLENBQUM7QUFXRCxDQUFDO0FBSUQsQ0FBQztBQUlELENBQUM7QUFDNkIsQ0FBQztBQUNGLENBQUM7QUFHL0IsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFcEI7UUFBeUIsOEJBQVc7UUFBcEM7O1FBbUNBLENBQUM7UUFoQ0MsNkRBQXdDLEdBQXhDLFVBQXlDLFdBQTBCLEVBQUUsYUFBMkI7WUFDOUYsSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDO1lBRXhCLElBQUksQ0FBQztnQkFDSCxJQUFNLFFBQVEsR0FBRyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztnQkFDekMsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUV6RCxJQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsY0FBYyxFQUFFLENBQUM7Z0JBQzFDLFdBQVcsR0FBRyxJQUFJLENBQUM7WUFDckIsQ0FBQztZQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNyQixDQUFDO1lBRUQsSUFBTSxXQUFXLEdBQUcsd0JBQXdCLENBQUMsY0FBYyxFQUFFLENBQUMsd0NBQXdDLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsMEJBQTBCO1lBRTlKLE1BQU0sQ0FBQyxXQUFXLElBQUksV0FBVyxDQUFDO1FBQ3BDLENBQUM7UUFFRCxrRUFBNkMsR0FBN0MsVUFBOEMsV0FBVyxFQUFFLEdBQUcsRUFBRSxpQkFBaUIsRUFBRSxVQUFVO1lBQzNGLElBQU0sV0FBVyxHQUFHLHdCQUF3QixDQUFDLGNBQWMsRUFBRSxDQUFDLDZDQUE2QyxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQywwQkFBMEI7WUFDeEwsSUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLGNBQWMsRUFBRSxDQUFDLG9DQUFvQyxDQUFDLEdBQUcsRUFBRSxpQkFBaUIsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLHdCQUF3QjtZQUNqSixJQUFNLGNBQWMsR0FBRyxLQUFLLENBQUM7WUFDN0IsRUFBRSxDQUFDLENBQUMsbUJBQW1CLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDN0MsSUFBSSxnQkFBYyxHQUFHLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQzlELEdBQUcsRUFDSCxpQkFBaUIsRUFDakIsVUFBVSxDQUNYLENBQUM7WUFDSixDQUFDO1lBRUQsTUFBTSxDQUFDLFdBQVcsSUFBSSxXQUFXLENBQUM7UUFDcEMsQ0FBQztRQWpDYSx3QkFBYSxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQWtDeEQsaUJBQUM7S0FBQSxBQW5DRCxDQUF5QixXQUFXLEdBbUNuQztJQUVELFdBQVcsQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQztBQUN4QyxDQUFDO0FBRUQsV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IEFwcGxpY2F0aW9uID0gcmVxdWlyZShcImFwcGxpY2F0aW9uXCIpO1xuXG5pbXBvcnQgKiBhcyBhcHBsaWNhdGlvbiBmcm9tIFwiYXBwbGljYXRpb25cIjtcbmltcG9ydCAqIGFzIHBsYXRmb3JtIGZyb20gXCJwbGF0Zm9ybVwiO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSBcInV0aWxzL3V0aWxzXCI7XG5cbmRlY2xhcmUgdmFyIGFuZHJvaWQ6IGFueTtcbi8vIGRlY2xhcmUgdmFyIFVJUmVzcG9uZGVyOiBhbnk7XG4vLyBkZWNsYXJlIHZhciBVSVN0YXR1c0JhclN0eWxlOiBhbnk7XG4vLyBkZWNsYXJlIHZhciBVSUFwcGxpY2F0aW9uOiBhbnk7XG4vLyBkZWNsYXJlIHZhciBVSUFwcGxpY2F0aW9uRGVsZWdhdGU6IGFueTtcblxuZGVjbGFyZSBjbGFzcyBVSVJlc3BvbmRlciB7IH07XG5kZWNsYXJlIGNsYXNzIFVJQXBwbGljYXRpb25EZWxlZ2F0ZSB7IH07XG5kZWNsYXJlIGNsYXNzIEZCU0RLQXBwbGljYXRpb25EZWxlZ2F0ZSB7XG4gIHN0YXRpYyBzaGFyZWRJbnN0YW5jZSgpOiBhbnk7XG5cbn07XG5kZWNsYXJlIGNsYXNzIExpbmtlZGluU3dpZnRIZWxwZXIge1xuICBzdGF0aWMgc2hvdWxkSGFuZGxlVXJsKHVybDogc3RyaW5nKTogYW55O1xuICBzdGF0aWMgYXBwbGljYXRpb24oYXBwbGljYXRpb246IGFueSxcbiAgICBvcGVuVVJMOiBhbnksXG4gICAgc291cmNlQXBwbGljYXRpb246IGFueSxcbiAgICBhbm5vdGF0aW9uOiBhbnkpOiBhbnk7XG59XG5cbmRlY2xhcmUgY2xhc3MgR0dMQ29udGV4dCB7XG4gIHN0YXRpYyBzaGFyZWRJbnN0YW5jZSgpOiBhbnk7XG59O1xuXG5kZWNsYXJlIGNsYXNzIEdJRFNpZ25JbiB7XG4gIHN0YXRpYyBzaGFyZWRJbnN0YW5jZSgpOiBhbnk7XG59O1xuXG5kZWNsYXJlIGNsYXNzIEZCU0RLQXBwRXZlbnRzIHtcbiAgc3RhdGljIGFjdGl2YXRlQXBwKCk7XG59O1xuZGVjbGFyZSBjbGFzcyBVSUFwcGxpY2F0aW9uIHsgfTtcbmRlY2xhcmUgY2xhc3MgTlNEaWN0aW9uYXJ5IHsgfTtcblxuXG5pZiAoYXBwbGljYXRpb24uaW9zKSB7XG5cbiAgY2xhc3MgTXlEZWxlZ2F0ZSBleHRlbmRzIFVJUmVzcG9uZGVyIGltcGxlbWVudHMgVUlBcHBsaWNhdGlvbkRlbGVnYXRlIHtcbiAgICBwdWJsaWMgc3RhdGljIE9iakNQcm90b2NvbHMgPSBbVUlBcHBsaWNhdGlvbkRlbGVnYXRlXTtcblxuICAgIGFwcGxpY2F0aW9uRGlkRmluaXNoTGF1bmNoaW5nV2l0aE9wdGlvbnMoYXBwbGljYXRpb246IFVJQXBwbGljYXRpb24sIGxhdW5jaE9wdGlvbnM6IE5TRGljdGlvbmFyeSk6IGJvb2xlYW4ge1xuICAgICAgbGV0IGdnbERlbGVnYXRlID0gZmFsc2U7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGVycm9yUmVmID0gbmV3IGludGVyb3AuUmVmZXJlbmNlKCk7XG4gICAgICAgIEdHTENvbnRleHQuc2hhcmVkSW5zdGFuY2UoKS5jb25maWd1cmVXaXRoRXJyb3IoZXJyb3JSZWYpO1xuXG4gICAgICAgIGNvbnN0IHNpZ25JbiA9IEdJRFNpZ25Jbi5zaGFyZWRJbnN0YW5jZSgpO1xuICAgICAgICBnZ2xEZWxlZ2F0ZSA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGZjYkRlbGVnYXRlID0gRkJTREtBcHBsaWNhdGlvbkRlbGVnYXRlLnNoYXJlZEluc3RhbmNlKCkuYXBwbGljYXRpb25EaWRGaW5pc2hMYXVuY2hpbmdXaXRoT3B0aW9ucyhhcHBsaWNhdGlvbiwgbGF1bmNoT3B0aW9ucyk7IC8vIGZhY2Vib29rIGxvZ2luIGRlbGVnYXRlXG5cbiAgICAgIHJldHVybiBnZ2xEZWxlZ2F0ZSB8fCBmY2JEZWxlZ2F0ZTtcbiAgICB9XG5cbiAgICBhcHBsaWNhdGlvbk9wZW5VUkxTb3VyY2VBcHBsaWNhdGlvbkFubm90YXRpb24oYXBwbGljYXRpb24sIHVybCwgc291cmNlQXBwbGljYXRpb24sIGFubm90YXRpb24pIHtcbiAgICAgIGNvbnN0IGZjYkRlbGVnYXRlID0gRkJTREtBcHBsaWNhdGlvbkRlbGVnYXRlLnNoYXJlZEluc3RhbmNlKCkuYXBwbGljYXRpb25PcGVuVVJMU291cmNlQXBwbGljYXRpb25Bbm5vdGF0aW9uKGFwcGxpY2F0aW9uLCB1cmwsIHNvdXJjZUFwcGxpY2F0aW9uLCBhbm5vdGF0aW9uKTsgLy8gZmFjZWJvb2sgbG9naW4gZGVsZWdhdGVcbiAgICAgIGNvbnN0IGdnbERlbGVnYXRlID0gR0lEU2lnbkluLnNoYXJlZEluc3RhbmNlKCkuaGFuZGxlVVJMU291cmNlQXBwbGljYXRpb25Bbm5vdGF0aW9uKHVybCwgc291cmNlQXBwbGljYXRpb24sIGFubm90YXRpb24pOyAvLyBnb29nbGUgbG9naW4gZGVsZWdhdGVcbiAgICAgIGNvbnN0IGxpbmtpbkRlbGVnYXRlID0gZmFsc2U7XG4gICAgICBpZiAoTGlua2VkaW5Td2lmdEhlbHBlci5zaG91bGRIYW5kbGVVcmwodXJsKSkge1xuICAgICAgICBsZXQgbGlua2luRGVsZWdhdGUgPSBMaW5rZWRpblN3aWZ0SGVscGVyLmFwcGxpY2F0aW9uKGFwcGxpY2F0aW9uLFxuICAgICAgICAgIHVybCxcbiAgICAgICAgICBzb3VyY2VBcHBsaWNhdGlvbixcbiAgICAgICAgICBhbm5vdGF0aW9uXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmY2JEZWxlZ2F0ZSB8fCBnZ2xEZWxlZ2F0ZTtcbiAgICB9XG4gIH1cblxuICBhcHBsaWNhdGlvbi5pb3MuZGVsZWdhdGUgPSBNeURlbGVnYXRlO1xufVxuXG5hcHBsaWNhdGlvbi5zdGFydCh7IG1vZHVsZU5hbWU6IFwibWFpbi1wYWdlXCIgfSk7XG4iXX0=